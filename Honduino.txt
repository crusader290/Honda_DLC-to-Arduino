*//
+12V Car Battery
                 │
                 │
                [Buck 5V]─────+───────────+5V to Nano VCC
                 │            │
                 │            └──+5V to OLED VCC
                 │
                 │
                 └─[0.5A fuse]─────> Honda DLC Pin 2 (+12V)
                 
Honda DLC 3-pin layout (Prelude '93):

       +12V ── Pin 2
       K-Line ── Pin 7 (connected below)
       GND ── Pin 4

K-Line protection network (for Nano RX):

Honda DLC Pin7
   │
   ├─[1kΩ resistor]──+─── KLine RX (Nano Pin3)
   │                  │
   │                ┌─┴─┐
   │                │Schottky Diode│
   │                │ Anode → KLine RX, Cathode → DLC 7
   │                └────┘
   │
   └─[47µF Capacitor]─┴─ GND (smooths K-Line voltage)

Nano Connections:

Nano Pin 2 (TX) ──── KLine TX through protection network
Nano Pin 3 (RX) ──── KLine RX through 1kΩ + Schottky
Nano GND ─────────── Car chassis / DLC Pin4
Nano VCC ─────────── Buck 5V (from 12V input)
OLED SDA ─────────── Nano A4
OLED SCL ─────────── Nano A5

Optional EEPROM storage is onboard; no SD card needed 

*//

#include <Arduino.h>
#include <SoftwareSerial.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <EEPROM.h>

// ---------- OLED Setup ----------
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// ---------- K-line pins ----------
#define K_RX 3
#define K_TX 2
SoftwareSerial KLine(K_RX, K_TX); // RX, TX

// ---------- ECU Init Sequences ----------
byte hondaInitBytes[][2] = {
  {0x68, 0x6A},
  {0x81, 0x13},
  {0x72, 0x05}
};
const int numInits = sizeof(hondaInitBytes)/sizeof(hondaInitBytes[0]);

#define MAX_FRAME 32
byte lastFrame[MAX_FRAME];
byte frameBuf[MAX_FRAME];

// ---------- Helper Functions ----------
void printTimestamp(Print &p){
  unsigned long ms = millis();
  char buf[16];
  sprintf(buf, "[%lu.%03lu] ", ms/1000, ms%1000);
  p.print(buf);
}

// EEPROM addresses
#define ADDR_RPM 0
#define ADDR_FUEL 2
#define ADDR_COOL 6

void saveEEPROM(int rpm, float fuelPct, float coolantC){
  EEPROM.put(ADDR_RPM, rpm);
  EEPROM.put(ADDR_FUEL, fuelPct);
  EEPROM.put(ADDR_COOL, coolantC);
}

void readEEPROM(int &rpm, float &fuelPct, float &coolantC){
  EEPROM.get(ADDR_RPM, rpm);
  EEPROM.get(ADDR_FUEL, fuelPct);
  EEPROM.get(ADDR_COOL, coolantC);
}

void setup() {
  // K-line TX idle high
  pinMode(K_TX, OUTPUT);
  digitalWrite(K_TX, HIGH);

  // Serial interfaces
  Serial.begin(115200);
  KLine.begin(10400);

  // OLED init
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)){
    Serial.println(F("OLED init failed"));
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);

  // Initialize lastFrame
  for(int i=0;i<MAX_FRAME;i++) lastFrame[i]=0xFF;

  // ECU init sequences
  for(int i=0;i<numInits;i++){
    KLine.write(hondaInitBytes[i][0]);
    delay(25);
    KLine.write(hondaInitBytes[i][1]);
    delay(100);
    printTimestamp(Serial);
    Serial.print(F("Sent init: "));
    Serial.print(hondaInitBytes[i][0], HEX); Serial.print(" ");
    Serial.println(hondaInitBytes[i][1], HEX);
  }

  Serial.println(F("ECU Init Complete"));

  // Read last values from EEPROM
  int rpm = 0; float fuel = 0, cool = 0;
  readEEPROM(rpm, fuel, cool);
  Serial.print("Last RPM: "); Serial.println(rpm);
  Serial.print("Last Fuel: "); Serial.println(fuel);
  Serial.print("Last Coolant: "); Serial.println(cool);
}

void loop() {
  static int frameIndex = 0;

  // Forward USB -> ECU
  while(Serial.available()){
    byte b = Serial.read();
    KLine.write(b);
    printTimestamp(Serial);
    Serial.print(F("TX->ECU: 0x")); if(b<0x10) Serial.print("0"); Serial.println(b, HEX);
  }

  // Read ECU -> Nano
  while(KLine.available()){
    byte b = KLine.read();

    if(frameIndex < MAX_FRAME) frameBuf[frameIndex] = b;

    // Serial logging
    printTimestamp(Serial);
    Serial.print(F("RX<-ECU: 0x")); if(b<0x10) Serial.print("0"); Serial.println(b, HEX);

    // Detect byte changes
    if(frameIndex < MAX_FRAME && lastFrame[frameIndex] != b){
      printTimestamp(Serial);
      Serial.print(F("  **Changed at pos ")); Serial.print(frameIndex);
      Serial.print(F(": 0x")); Serial.println(b, HEX);
      lastFrame[frameIndex] = b;
    }

    frameIndex++;
    if(frameIndex >= MAX_FRAME) frameIndex = 0;

    // ---------- Parse RPM, Fuel, Coolant ----------
    int rpm = -1;
    float fuelPct = -1;
    float coolantC = -1;

    for(int i=0;i<frameIndex-3;i++){
      if(frameBuf[i]==0x20 && frameBuf[i+1]==0x05) rpm = ((int)frameBuf[i+2]*256 + frameBuf[i+3])/4;
      if(frameBuf[i]==0x20 && frameBuf[i+1]==0x0A) fuelPct = frameBuf[i+2]/2.55;
      if(frameBuf[i]==0x20 && frameBuf[i+1]==0x06) coolantC = frameBuf[i+2]-40;
    }

    // ---------- Display ----------
    display.clearDisplay();
    display.setCursor(0,0);
    display.println(F("K-Line Live Data:"));
    for(int i=0;i<frameIndex;i++){
      display.print(i); display.print(":"); display.print(frameBuf[i], HEX); display.print(" ");
      if((i+1)%8==0) display.println();
    }

    int y = SCREEN_HEIGHT-30;
    display.setCursor(0, y);
    if(rpm>=0) display.print(F("RPM: ")); if(rpm>=0) display.println(rpm);
    display.setCursor(0, y+10);
    if(fuelPct>=0) display.print(F("Fuel: ")); if(fuelPct>=0) display.println(fuelPct);
    display.setCursor(0, y+20);
    if(coolantC>=0) display.print(F("Coolant: ")); if(coolantC>=0) display.println(coolantC);
    display.display();

    // ---------- USB logging ----------
    if(rpm>=0){
      printTimestamp(Serial); Serial.print(F("Engine RPM: ")); Serial.println(rpm);
    }
    if(fuelPct>=0){
      printTimestamp(Serial); Serial.print(F("Fuel Level: ")); Serial.println(fuelPct);
    }
    if(coolantC>=0){
      printTimestamp(Serial); Serial.print(F("Coolant Temp: ")); Serial.println(coolantC);
    }

    // ---------- Save last values to EEPROM occasionally ----------
    static unsigned long lastEEPROM = 0;
    if(millis() - lastEEPROM > 5000){ // every 5 seconds
      if(rpm>=0 && fuelPct>=0 && coolantC>=-40){
        saveEEPROM(rpm, fuelPct, coolantC);
        lastEEPROM = millis();
      }
    }
  }
}
