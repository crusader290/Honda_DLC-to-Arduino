#include <Arduino.h>
#include <SoftwareSerial.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <EEPROM.h>

// ---------- OLED Setup ----------
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// ---------- K-Line Pins ----------
#define K_RX 3
#define K_TX 2
SoftwareSerial KLine(K_RX, K_TX);
#define MAX_FRAME 128
byte frameBuf[MAX_FRAME];
int frameLen = 0;

// ---------- Parsed Values ----------
int rpm = 0, coolantC = 0, fuelPct = 0;
int stft = 0, ltft = 0;
int map_kPa = 0; float map_psi = 0;
int vss_kmh = 0;
float ecuVoltage = 0.0;
int iacvPct = 0, timingAdvance = 0;

// ---------- EEPROM Addresses ----------
#define ADDR_RPM 0
#define ADDR_FUEL 2
#define ADDR_COOL 6
#define ADDR_SPEED 10
#define ADDR_STFT 14
#define ADDR_LTFT 18

void saveEEPROM() {
  EEPROM.put(ADDR_RPM, rpm);
  EEPROM.put(ADDR_FUEL, fuelPct);
  EEPROM.put(ADDR_COOL, coolantC);
  EEPROM.put(ADDR_SPEED, vss_kmh);
  EEPROM.put(ADDR_STFT, stft);
  EEPROM.put(ADDR_LTFT, ltft);
}

void readEEPROM() {
  EEPROM.get(ADDR_RPM, rpm);
  EEPROM.get(ADDR_FUEL, fuelPct);
  EEPROM.get(ADDR_COOL, coolantC);
  EEPROM.get(ADDR_SPEED, vss_kmh);
  EEPROM.get(ADDR_STFT, stft);
  EEPROM.get(ADDR_LTFT, ltft);
}

// ---------- Safe Ranges for Verification ----------
struct VerifyRange { const char* name; int minVal; int maxVal; };
VerifyRange safeRanges[] = {
  {"RPM",0,10000},{"Fuel",0,100},{"Temp",-40,120},{"Speed",0,250},
  {"MAP",0,300},{"IACV",0,100},{"STFT",-100,100},{"LTFT",-100,100},
  {"Timing",0,60},{"ECU V",8,16}
};
const int numRanges = sizeof(safeRanges)/sizeof(safeRanges[0]);

void verifyValues() {
  for(int i=0;i<numRanges;i++){
    const char* n = safeRanges[i].name; int val=0;
    if(strcmp(n,"RPM")==0) val=rpm;
    else if(strcmp(n,"Fuel")==0) val=fuelPct;
    else if(strcmp(n,"Temp")==0) val=coolantC;
    else if(strcmp(n,"Speed")==0) val=vss_kmh;
    else if(strcmp(n,"MAP")==0) val=map_kPa;
    else if(strcmp(n,"IACV")==0) val=iacvPct;
    else if(strcmp(n,"STFT")==0) val=stft;
    else if(strcmp(n,"LTFT")==0) val=ltft;
    else if(strcmp(n,"Timing")==0) val=timingAdvance;
    else if(strcmp(n,"ECU V")==0) val=(int)(ecuVoltage*10);
    if(val<safeRanges[i].minVal || val>safeRanges[i].maxVal){
      Serial.print("[WARNING] "); Serial.print(n);
      Serial.print(" out of range: "); Serial.println(val);
    }
  }
}

// ---------- Honda ECU Init ----------
byte hondaInitBytesFull[] = {0x68,0x6A,0xF5,0xAF,0xBF,0xB3,0xB2,0xC1,0xDB,0xB3,0xE9};
const int numInitBytes = sizeof(hondaInitBytesFull)/sizeof(hondaInitBytesFull[0]);
void sendHondaInit() {
  Serial.println(F("Starting ECU Init Sequence..."));
  for(int i=0;i<numInitBytes;i++){
    KLine.write(hondaInitBytesFull[i]); delay(50);
    Serial.print("Sent init byte: 0x");
    if(hondaInitBytesFull[i]<0x10) Serial.print("0");
    Serial.println(hondaInitBytesFull[i],HEX);
  }
  Serial.println(F("ECU Init Complete"));
}

// ---------- Parse ECU Frame ----------
void parseFrame(byte* data,int len){
  for(int i=0;i<len-3;i++){
    if(data[i]==0x20 && data[i+1]==0x05){
      if(data[i+2]==0x0C) rpm=((int)data[i+3]*256+data[i+4])/4;
      if(data[i+2]==0x0A) fuelPct=data[i+3]/2.55;
      if(data[i+2]==0x06) coolantC=data[i+3]-40;
      if(data[i+2]==0x20) stft=(data[i+3]-128)*100/128;
      if(data[i+2]==0x22) ltft=(data[i+3]-128)*100/128;
      if(data[i+2]==0x26) timingAdvance=data[i+3];
      if(data[i+2]==0x12){ map_kPa=data[i+3]; map_psi=map_kPa*0.145; }
      if(data[i+2]==0x17) ecuVoltage=data[i+3]/10.0;
      if(data[i+2]==0x28) iacvPct=data[i+3];
    }
    if(data[i]==0x21 && data[i+1]==0x05) vss_kmh=data[i+2];
  }
}

// ---------- Setup ----------
void setup() {
  pinMode(K_TX,OUTPUT); digitalWrite(K_TX,HIGH);
  Serial.begin(115200); KLine.begin(10400);
  if(!display.begin(SSD1306_SWITCHCAPVCC,0x3C)){ Serial.println(F("OLED init failed")); for(;;);}
  display.clearDisplay(); display.setTextSize(1); display.setTextColor(SSD1306_WHITE);
  sendHondaInit(); readEEPROM();
}

// ---------- Loop ----------
void loop() {
  static unsigned long lastEEPROM=0;

  // USB -> ECU forward
  while(Serial.available()){ KLine.write(Serial.read()); }

  // ECU -> Nano read
  while(KLine.available()){
    byte b=KLine.read();
    if(frameLen<MAX_FRAME) frameBuf[frameLen++]=b;
  }

  // Multi-frame parsing
  while(frameLen>=5){
    int frameStart=-1;
    for(int i=0;i<frameLen-1;i++){ if(frameBuf[i]==0x68){ frameStart=i; break; } }
    if(frameStart<0){ frameLen=0; break; }
    int expectedLen=frameBuf[frameStart+1];
    if(frameStart+expectedLen+3>frameLen) break;
    parseFrame(frameBuf+frameStart,expectedLen+3);
    verifyValues(); // log mis-labeled/out-of-range
    int remaining=frameLen-(frameStart+expectedLen+3);
    if(remaining>0) memmove(frameBuf,frameBuf+frameStart+expectedLen+3,remaining);
    frameLen=remaining;
  }

  // Display / USB Logging
  display.clearDisplay(); display.setCursor(0,0);
  display.print("SPD: "); display.print(vss_kmh); display.println(" km/h");
  display.print("RPM: "); display.print(rpm); display.println(" rpm");
  display.print("Fuel: "); display.print(fuelPct); display.println("%");
  display.print("Temp: "); display.print(coolantC); display.println((char)247); display.println("C");
  display.print("ECU V: "); display.print(ecuVoltage,1); display.println("V");
  display.print("Timing: "); display.print(timingAdvance); display.println((char)247);
  display.print("MAP: "); display.print(map_kPa); display.print(" kPa / "); display.print(map_psi,1); display.println(" psi");
  display.print("IACV: "); display.print(iacvPct); display.println("%");
  display.print("STFT: "); display.print(stft); display.println("%");
  display.print("LTFT: "); display.print(ltft); display.println("%");
  display.display();

  Serial.print("Speed: "); Serial.print(vss_kmh); Serial.println(" km/h");
  Serial.print("RPM: "); Serial.print(rpm); Serial.println(" rpm");
  Serial.print("Fuel: "); Serial.print(fuelPct); Serial.println("%");
  Serial.print("Temp: "); Serial.print(coolantC); Serial.println(" C");
  Serial.print("ECU V: "); Serial.print(ecuVoltage,1); Serial.println(" V");
  Serial.print("Timing Advance: "); Serial.print(timingAdvance); Serial.println(" Â°");
  Serial.print("MAP: "); Serial.print(map_kPa); Serial.print(" kPa
  Serial.print("MAP: "); Serial.print(map_kPa); Serial.print(" kPa / "); 
  Serial.print(map_psi,1); Serial.println(" psi");
  Serial.print("IACV: "); Serial.print(iacvPct); Serial.println("%");
  Serial.print("STFT: "); Serial.print(stft); Serial.println("%");
  Serial.print("LTFT: "); Serial.print(ltft); Serial.println("%");
  Serial.println("---------------------------");

  // Save to EEPROM every 5s
  if(millis() - lastEEPROM > 5000){
    saveEEPROM();
    lastEEPROM = millis();
  }

  delay(100); // small delay to avoid overloading Serial/OLED
}
